config:
  name: 订单测试-规范SQL断言示例
  base_url: ${ENV(BASE_URL)}
  tags: [order, sql, standard]
  variables:
    test_username: order_${short_uid(8)}
    test_email: order_${short_uid(8)}@example.com
    test_password: ${ENV(USER_PASSWORD)}

steps:
  # ==================== 测试准备：注册登录 ====================
  
  - name: 步骤1-注册用户
    request:
      method: POST
      path: /api/v1/auth/register
      headers:
        Content-Type: application/json
      body:
        username: $test_username
        email: $test_email
        password: $test_password
        full_name: Order Test User
    extract:
      user_id: $.data.id
    validate:
      - eq: [status_code, 201]

  - name: 步骤2-登录
    request:
      method: POST
      path: /api/v1/auth/login
      headers:
        Content-Type: application/json
      body:
        username: $test_username
        password: $test_password
    extract:
      token: $.data.access_token
    validate:
      - eq: [status_code, 200]
      
      # 验证登录响应
      - ne: [$.data.access_token, null]

  # ==================== 测试1：创建订单流程 ====================
  
  - name: 步骤3-添加商品到购物车
    setup_hooks:
      # ✅ 正确：setup准备商品数据
      - ${setup_hook_prepare_product_data(1)}
    request:
      method: POST
      path: /api/v1/cart/items
      headers:
        Authorization: Bearer $token
        Content-Type: application/json
      body:
        product_id: 1
        quantity: 2
    validate:
      # ✅ 正确：断言在validate中
      - eq: [status_code, 201]
      - ne: [$.data, null]

  - name: 步骤4-查看购物车
    request:
      method: GET
      path: /api/v1/cart/
      headers:
        Authorization: Bearer $token
    extract:
      cart_total: $.data.total_price
    validate:
      # ✅ 正确：断言在validate中
      - eq: [status_code, 200]
      
      # 验证购物车响应
      - gt: [$.data.total_price, 0]
      - len_eq: [$.data.items, 1]

  - name: 步骤5-创建订单
    request:
      method: POST
      path: /api/v1/orders/
      headers:
        Authorization: Bearer $token
        Content-Type: application/json
      body:
        shipping_address: "Order Test Street 789"
    extract:
      order_id: $.data.order_id
      order_status: $.data.order_status
    validate:
      # ✅ 正确：断言在validate中
      - eq: [status_code, 201]
      - ne: [$.data, null]
      - gt: [$.data.total_price, 0]

  # ==================== 测试2：验证订单数据 ====================
  
  - name: 步骤6-查询订单详情（规范写法）
    setup_hooks:
      # ✅ 正确：setup准备订单数据
      - ${setup_hook_prepare_order_data($order_id)}
    variables:
      # 调用SQL hook函数获取数据库中的值
      db_order_status: ${hook_query_order_status($order_id)}
      db_order_total: ${hook_query_order_total_price($order_id)}
      db_order_owner: ${hook_query_order_owner_id($order_id)}
    request:
      method: GET
      path: /api/v1/orders/$order_id
      headers:
        Authorization: Bearer $token
    validate:
      # ✅ 正确：断言在validate中
      - eq: [status_code, 200]
      
      # SQL断言：验证API返回值与数据库一致
      - eq: [$.data.id, $order_id]
      - eq: [$.data.status, $db_order_status]
      - eq: [$.data.total_price, $db_order_total]
      - eq: [$.data.owner_id, $db_order_owner]
      - eq: [$.data.shipping_address, "Order Test Street 789"]
      - gt: [$.data.total_price, 0]
      - ne: [$.data.items, null]
    teardown_hooks:
      # ✅ 正确：teardown记录统计
      - ${teardown_hook_record_test_stats($response, $session_variables)}

  - name: 步骤7-查询订单列表
    request:
      method: POST
      path: /api/v1/orders/search
      headers:
        Authorization: Bearer $token
        Content-Type: application/json
      body:
        skip: 0
        limit: 10
    validate:
      # ✅ 正确：断言在validate中
      - eq: [status_code, 200]
      
      # SQL断言：验证订单列表响应
      - gt: [$.data.total, 0]
      - ne: [$.data.items, null]

  # ==================== 测试3：验证库存扣减 ====================
  
  - name: 步骤8-验证商品库存已扣减
    setup_hooks:
      # ✅ 正确：setup准备商品数据
      - ${setup_hook_prepare_product_data(1)}
    variables:
      # 调用SQL hook函数获取数据库中的库存
      db_product_stock: ${hook_query_product_stock(1)}
    request:
      method: GET
      path: /api/v1/products/1
    validate:
      # ✅ 正确：断言在validate中
      - eq: [status_code, 200]
      
      # SQL断言：验证API返回的库存与数据库一致
      - eq: [$.data.stock, $db_product_stock]
      - ge: [$.data.stock, 0]

  # ==================== 测试4：清理测试数据 ====================
  
  - name: 步骤9-清理测试订单
    variables:
      # 调用SQL hook函数验证订单状态
      db_order_status: ${hook_query_order_status($order_id)}
    request:
      method: GET
      path: /api/v1/orders/$order_id
      headers:
        Authorization: Bearer $token
    validate:
      # ✅ 正确：断言在validate中
      - eq: [status_code, 200]
      
      # SQL断言：验证API返回值与数据库一致
      - eq: [$.data.id, $order_id]
      - eq: [$.data.status, $db_order_status]
    teardown_hooks:
      # ✅ 正确：teardown清理订单数据
      - ${teardown_hook_cleanup_test_order($response, $session_variables)}

  - name: 步骤10-清理测试用户
    variables:
      # 调用SQL hook函数验证用户信息
      db_username: ${hook_query_user_username($user_id)}
      db_email: ${hook_query_user_email($user_id)}
    request:
      method: GET
      path: /api/v1/users/me
      headers:
        Authorization: Bearer $token
    validate:
      # ✅ 正确：断言在validate中
      - eq: [status_code, 200]
      
      # SQL断言：验证API返回值与数据库一致
      - eq: [$.data.id, $user_id]
      - eq: [$.data.username, $db_username]
      - eq: [$.data.email, $db_email]
    teardown_hooks:
      # ✅ 正确：teardown清理用户数据
      - ${teardown_hook_cleanup_test_user($response, $session_variables)}
